from src.E2EMedicalChatBotWithRAG.logger import logger
from src.E2EMedicalChatBotWithRAG.models import LLMAssistant
from src.E2EMedicalChatBotWithRAG.vector_database import PineconeDB
from src.E2EMedicalChatBotWithRAG.exceptions import AppException
from langchain.chains import create_retrieval_chain
from langchain.chains.combine_documents import create_stuff_documents_chain

class RAGChain:
    def __init__(self):
        self.llm_assistant = LLMAssistant()
        self.pinecone_db = PineconeDB()
        self.chain = self._create_chain()

    def invoke(self, question):
        """
            Call the RAG chain with the given question.

            Args:
                question (str): The input question to be answered.

            Returns:
                str: The answer generated by the RAG chain.

            Raises:
                AppException: If there is an error during the chain execution.
        """
        try:
            response = self.chain.invoke({"input": question})
            return response["answer"]
        except Exception as e:
            logger.error(f"Error in RAGChain call: {e}")
            raise AppException(e) from e
    
    def _create_chain(self):
        """
            Build and return a Retrieval-Augmented Generation (RAG) chain.

            This wires:
                • An LLM and prompt from LLMAssistant
                • A Pinecone retriever from PineconeDB (must already have an index)

            Returns:
                langchain.schema.runnable.Runnable: A runnable RAG chain.

            Raises:
                AppException: If the index is missing or the chain cannot be created.
        """
        try:
            llm = self.llm_assistant.get_model()
            prompt = self.llm_assistant.get_template()
            qna_chain = create_stuff_documents_chain(
                llm,
                prompt=prompt
            )
            retriever = self.pinecone_db.get_retriever()
            rag_chain = create_retrieval_chain(
                retriever,
                qna_chain
            )
            return rag_chain
        except Exception as e:
            logger.error(f"Error in creating RAG chain: {e}")
            raise AppException(e) from e
    