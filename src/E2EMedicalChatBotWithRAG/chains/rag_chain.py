from src.E2EMedicalChatBotWithRAG.logger import logger
from src.E2EMedicalChatBotWithRAG.models.llm_model import LLMAssistant
from src.E2EMedicalChatBotWithRAG.vector_database import RedisDB
from src.E2EMedicalChatBotWithRAG.exceptions import AppException
from langchain.chains import create_retrieval_chain

class RAGChain:
    def __init__(self):
        self.llm_assistant = LLMAssistant()
        self.vector_store = RedisDB()
        self.chain = self._create_chain()
    
    async def ainvoke(self,question: str):
        """
            Asynchronously call the RAG chain with the given question.

            Args:
                question (str): The input question to be answered.

            Yields:
                str: The answer generated by the RAG chain.

            Raises:
                AppException: If there is an error during the chain execution.
        """
        
        try:
            async for chunk in self.chain.astream({"input": question}):
                text = chunk.get('answer')
                if text:
                    word = text.content
                    yield word
            
        except Exception as e:
            raise AppException(e) from e
        
    def _create_chain(self):
        """
            Build and return a Retrieval-Augmented Generation (RAG) chain.

            This wires:
                • An LLM and prompt from LLMAssistant
                • A Pinecone retriever from PineconeDB (must already have an index)

            Returns:
                langchain.schema.runnable.Runnable: A runnable RAG chain.

            Raises:
                AppException: If the index is missing or the chain cannot be created.
        """
        try:
            llm = self.llm_assistant.get_model()
            prompt = self.llm_assistant.get_template()
            qna_chain =  prompt | llm
            retriever = self.vector_store.get_retriever()
            rag_chain = create_retrieval_chain(
                retriever,
                qna_chain
            )
            return rag_chain
        except Exception as e:
            logger.error(f"Error in creating RAG chain: {e}")
            raise AppException(e) from e
    